# -*- mode: snippet -*-
# name: storage
# key: storage
# --
package  `(file-name-nondirectory (directory-file-name (file-name-directory default-directory)))`

import (
	"fmt"
	"time"

	"strings"

	"errors"

	"strconv"

	"github.com/golang/glog"
	"gitlab.luojilab.com/igetserver/common/context"
	"gitlab.luojilab.com/igetserver/storage"
)

type ${1:StorageName} struct {
}

func New$1() *$1 {
	return &$1{}
}

func (this $1) GetKey() (key storage.Key) {
	return nil
}

func (this *$1) parseKey(key storage.Key) (id int64, err error) {
	//tokens := strings.Split(key.String(), "|")
	//if len(tokens) != 1 {
		//err = errors.New("key format error:" + key.String())
		//return
	//}
	//id, err = int64(strconv.Atoi(tokens[0]))
	//if err != nil {
		//return
	//}
	return
}

// Get ...
func (this *$1) Get(ctx *context.Context, key storage.Key, object interface{}) error {

	return nil

}

func (this *$1) Add(ctx *context.Context, key storage.Key, object interface{}) error {
	return nil
}

// Set ...
func (this *$1) Set(ctx *context.Context, key storage.Key, object interface{}) error {
	return nil
}

func (this *$1) MultiGet(ctx *context.Context, keys []storage.Key, valuesMap interface{}) error {
	return nil
}

func (this *$1) MultiSet(ctx *context.Context, m map[storage.Key]interface{}) error {
	return nil
}

func (this *$1) Delete(ctx *context.Context, key ...storage.Key) error {
	return nil
}

func New$1StorageProxy(proxyMgr *storage.RedisStorageProxyMgr, ) storage.Storage {
	//dbStorage := New$1Storage()
	keyPrefix := "coupon:coupon:phone~index"
	defaultExpireTime := time.Duration(0)
	encoding := storage.JsonGzipEncoding{}
    newFunc:=func() interface{} { return new(int64) }

	proxy, err := proxyMgr.NewRedisStorageProxy(dbStorage, keyPrefix, defaultExpireTime, encoding, newFunc, dao.IsBenchMarkFalse)
	if err != nil {
		glog.Error(err)
		panic(err)
	}

	return proxy
}
